<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于爬虫爬取基金信息</title>
      <link href="2021/04/11/FundSpyder/"/>
      <url>2021/04/11/FundSpyder/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  很早之前就听说神经网络这个名词，觉得很高级，昨天看了一下机器学习的神经网络算法，感觉很高级，挺感兴趣的，就是看不懂哈哈哈哈。在B站上看了一个《一小时大话BP神经网络》教我如何从入门到放弃。里面涉及的数学统计知识太多了，可惜我是个数学白痴，但是对机器学习确实蛮感兴趣的，神经网络学不明白可以换个简单的机器学习模型试试。后来想着能不能用机器学习预测一下基金走势，随便玩玩不做投资建议，体验一下机器学习的高大上。</p><p>  这篇文章便是为了提供机器学习数据基础——收集基金信息。</p><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><ol><li>选择一个好爬的基金网页，这里以天天基金为例（网上关于天天基金爬取教程还蛮多的哈，可能是好抓包）</li><li>打开浏览器的开发工具，切换到network下，点击下一页基金，查看发送的ajax请求。很容易发现有个请求里的jason数据就是我们想要的数据，抓到包就可以开始撸代码了！</li><li>具体代码思路不细说了，看代码注释也比较详细了</li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre><code class="line-numbers language-python">import requestsimport jsonimport reimport pandas as pddf_list = []  #用于存放每页表格for index in range(1,100):  #index是url中的页码，在url中用占位符表示    url = 'http://api.fund.eastmoney.com/f10/lsjz?callback=jQuery1830730414064313736_1618137747657&amp;fundCode=110023&amp;pageIndex={}&amp;pageSize=20&amp;startDate=&amp;endDate=&amp;_=1618137795389'.format(index)    #请求头    headers = {        #防盗链     确定来路        'Referer': 'http://fundf10.eastmoney.com/',        #身份证        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36'    }    # 模拟浏览器发送请求  接收数据    resp = requests.get(url,headers=headers)    html = resp.text    res = re.findall('\((.*?)\)',html) #正则表达式把jquery....去掉    datas = json.loads(res[0])["Data"]["LSJZList"] # res是数组，要用res[0]表示                                                   # json.loads 用于提取字符串中的json格式    # 整理成表的形式    df = pd.DataFrame(datas)    df_list.append(df)  #apend方法：在表末尾添加元素df_data = pd.concat(df_list)df_data.to_csv('易方达医疗保健行业混合 (110023).csv',index=False) #index=false 表示不输出索引值</code></pre><h2 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果"></a>爬取结果</h2><p>在工程文件路径下生成了一个.csv文件（.csv常用于数据分析）</p><p><img src="/2021/04/11/FundSpyder/1.png" alt="1"></p><p>把这支基金从出生到现在的数据都爬完啦，也就不到2000组（为了便于观看，列名已经修改）</p><p><img src="/2021/04/11/FundSpyder/2.png" alt="2"></p><hr><p>  以上就是数据收集的过程，不知道下篇能不能找到合适的机器学习模型建立，希望能找一个既简单拟合度又不是太离谱的模型吧😚😚😚</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于java实现自动核查作业程序check</title>
      <link href="2021/03/30/JavaCheck/"/>
      <url>2021/03/30/JavaCheck/</url>
      
        <content type="html"><![CDATA[<h2 id="编写背景"><a href="#编写背景" class="headerlink" title="编写背景"></a>编写背景</h2><p>  大二上学期期末的时候堆了一堆实验报告要交，数据结构2个实验，java4个实验，还有线代截图要收，每次收作业即使通知同学们按规定命名文件但还有很多同学不按规定命名五花八门啥都有，每次收作业都要收个1 个多小时才能收齐，期末都没得时间复习了<span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>  然后刚好那个学期学了java，对java还比较感兴趣和熟悉，刚一考完试我就开始动手了，边学边写花了我5个小时。整个代码的实现逻辑都是自己想的，然后剩下一下没学过的类和方法在网上学习。之前用python写过一个差不多的十几行的代码实现“微信群接龙”查找名字，这个程序也是借鉴了上次的思想。</p><p>  这是V1.0版本的，功能只有查找没交作业名单的功能，本来第二次更新V2.0的时候加入了自动重命名功能的，但是我今天在打开NetBeans的时候之前写代码都不见了55555，Github上也找不到（我记得当时备份了yue），现在这个代码还是我翻聊天记录找的，之前复制给别的班学委留下来的记录（还好当时发给别人过）。不然真的惨死了，真的一点都想不起来之前怎么写的了。</p><p>  <strong>V2.0</strong>版本虽然新增了自动重命名功能，但是我当时并没有把学号加进去，当时是有思路的，但嫌麻烦是懒得弄了，看需要吧，如果我或者大家需要自动重命名功能的话我到时会在重新写一个完整的。</p><p>  <strong>V3.0</strong>版本我当时是想做一个GUI然后打包的，方便大家使用，本来是想在暑假做的，后来暑假。。。（懂得都懂）结果现在关于GUI的知识也都已经忘完了，随缘<span class="github-emoji"><span>🙏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。如果哪天心血来潮的话再上线吧。</p><p>  话不多说，开干！</p><hr><p>——2021.4.1更新：已经在github上找到V2.0版本的代码了，一下文章是V2.0的文档。代码版本管理真的太重要了，之前的git操作都忘了差不多了，看来得重新再看看git原理了<span class="github-emoji"><span>✊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，顺便吐槽一下github打开真的太慢了，每次打开都好久好久都毛火完了，是不是该考虑转gitee了，有没有用过gitee的伙伴分享一下体验<span class="github-emoji"><span>🙏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🙏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="使用前的准备工作"><a href="#使用前的准备工作" class="headerlink" title="使用前的准备工作"></a>使用前的准备工作</h2><ol><li>Java开发环境，我们老师推荐我们用的是NetBeans，当然其他的也可以</li><li>一个存放了班级所有名字的.txt文件，注意格式每一行放一个人名</li><li>如果使用重命名功能，千万千万记得备份一份，万一重命名出现了BUG名字就乱套了</li><li>重命名功能可能不太稳定注意备份测试后使用</li></ol><h2 id="代码原理"><a href="#代码原理" class="headerlink" title="代码原理"></a>代码原理</h2><p>  一共两个类：</p><ol><li>Check类：是主类，包含核心查找方法以及人名的读取</li><li>FileNames类：主要包含关于文件操作的属性和方法</li></ol><h4 id="核心查找方法的原理："><a href="#核心查找方法的原理：" class="headerlink" title="核心查找方法的原理："></a>核心查找方法的原理：</h4><p>  第一步：创建全体名单数组（allName[]）</p><p>  用一个.txt文件按行存放每个同学的名字（可以从班级名字表中复制），再按行读取每个名字存到一个字符串数组（allName[]）里，这样就能确保每个名字独占一个数组空间。</p><p>  第二步：创建包含所有文件名的字符串型变量（txt）</p><p>  把下载的同学们的作业文件名也分别存到一个字符串型数组（name[]）里，再把每个文件名取出来集中放到一个字符串变量（txt）中。</p><p>  第三步：在txt中查找allName中的每一个元素</p><p>  使用java String 类中的contain方法即可实现。</p><h4 id="重命名方法原理："><a href="#重命名方法原理：" class="headerlink" title="重命名方法原理："></a>重命名方法原理：</h4><p>等待更新……</p><h2 id="源代码展示"><a href="#源代码展示" class="headerlink" title="源代码展示"></a>源代码展示</h2><p>Check类：（又重新添加了很多注释，应该不难看懂）</p><pre><code class="line-numbers language-java">package check;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.io.LineNumberReader;/** * * @author Yuukyou *///check类public class Check {    String[] allName= new String[50];                                     //数组allNme用于存放完整的班级名单，默认长度为50，可根据具体人数修改    String txt = "";                                                                 //初始化txt变量            /***该方法用于全体人名的读取和写入***/   public  void printByFileReader(String filePath) throws IOException{        File file = new File("E:\\全体名单.txt");                                //打开存放有全体名单的txt文本文件，每一行存放一个人名        FileReader fileReader = new FileReader(file);        LineNumberReader reader = new LineNumberReader(fileReader);  //创建reader对象用于读取每一行的人名        String txt = "";            for(int lines=1;lines&lt;=35;lines++){                              //lines：行数，即读取人名数量，根据具体人数改变        txt = reader.readLine();                                           //txt记录每一次读取到的人名        allName[lines]=txt;                                                 //将每次txt中的人名存放到allName数组       // System.out.println("第"+lines+"行的内容是"+allName[lines]);     //此行用于测试是否存放成功   }        reader.close();        fileReader.close();}      /***check方法用于检测没交作业的同学***/  public void check(String[] all,String txt){                 //txt存放所有文件名            for(int i=1;i&lt;=35;i++){          boolean status =txt.contains(all[i]);                                //每次取全体名单中的一个元素，在txt中查找          if(!status) {              System.out.println(all[i]+"未交作业");}                        //若不存在则输出未交作业名单          }            }       public static void main(String[] args) throws IOException  {        // TODO code application logic here        FileNames Newname = new FileNames();        Newname.FileName("E:\\电商1903作业\\电商1903java实验报告\\实验一");        Check Allname  = new Check();        Allname.printByFileReader("E:\\全体名单.txt");        Allname.check(Allname.allName,Newname.FileName("E:\\电商1903作业\\电商1903java实验报告\\实验一"));          }    }</code></pre><p>FileNames类：（一些被注释掉的代码块是当时写代码时候的其他版本，没注释的是慢慢调式过来能用的版本，大家也可以自己把注释的代码块删了）</p><pre><code class="line-numbers language-java">package check;import java.io.File;import java.io.IOException;/** * * @author Yuukyou */public class FileNames {        static String partaddress = "E:\\电商1903作业\\电商1903java实验报告\\实验二";    static String alladdress = "E:\\全体名单.txt";    static String partName = "";  //调用txt前先使用FileName方法    public FileNames() {    }         public static String FileName(String filePath){        File file =new File(filePath);                        //传入        String[] name = file.list();                           //String[] list() : 返回一个字符串数组，这些字符串指定file路径下的所有文件和目录  ==》列出文件名        String txt="";        for(int i=1;i&lt;name.length;i++){                 //将所有文件名从数组name中取出，放到txt变量中            txt+=name[i];        }      //   测试 System.out.println(txt);        return txt;}           public static String GetFileName(String filePath) {        File file = new File(filePath);        String[] name = file.list();        //String txt="";        for (int i = 0; i &lt; name.length; i++) {            partName += name[i];        }           //System.out.println(partName);        return partName;    }                 public static void Rename(String filePath) throws IOException {        File file = new File(filePath);        String[] filename = new String[50];       // file.renameTo(new File(filePath));        //读取文件夹下的文件，存进一个文件数组        File[] listfile = file.listFiles();              //读取每个文件名称，找下标对应                       String[] name = file.list();       // for(int l=0;l&lt;name.length;l++){       // System.out.println(name[l]);}        int k= 0;        for (k=0; k &lt; name.length; k++) {            filename[k] += name[k];         System.out.println("第"+k+"个文件名"+filename[k]);        }              //  File file = new File(partaddress);     /* FileReader fileReader = new FileReader(file);        LineNumberReader reader = new LineNumberReader(fileReader);        String txt = "";    for(int lines=0;lines&lt;=35;lines++){        txt = reader.readLine();        filename[lines]=txt;        System.out.println("第"+lines+"行的内容是"+filename[lines]);    }*/        //遍历重命名         Check check = new Check();         check.printByFileReader(alladdress);        Check Allname = new Check();        Allname.printByFileReader(alladdress);        //System.out.println();        FileNames partname = new FileNames();        partname.GetFileName(partaddress);        //System.out.println(partname.FileName(partaddress));        for (int i = 1; i &lt; listfile.length; i++) {            if (listfile[i].isFile()) {               // boolean status = false;                for (int j = 0; j &lt;= Allname.allName.length; j++) {                   boolean  status = filename[i].contains(Allname.allName[j]);    // ！BUG：第0个文件名nulldesktop.ini                    // System.out.println(Allname.allName[j]);                    if (status) {                        String newname = "电商1903-java实验二-" + Allname.allName[j] + ".doc";                        File refile = new File(filePath + File.separator + newname);                        listfile[i].renameTo(refile);                        System.out.println("重命名成功"+newname);                        break;                    }                }                /*  if(check.check(Allname.allName,partname.FileName(partaddress)))                 {                 for(int j=1;j&lt;=35;j++){                 //文件定位                 String newname="电商1903-Java实验二"+Check.allName[j]+".doc";                 File refile=new File(filePath+File.separator+newname);                 listfile[i].renameTo(refile);                 }                 }*/                System.out.println(listfile[i] + "重命名成功！");            }        }    }}</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你觉得这篇文章对你还有点用的话，欢迎打赏博主一块小饼干(o^^o)没有小饼干留下你的小脚印也行(^з^)，如果有更好的算法或者功能方面的建议也欢迎评论区或者留言区交流哦(^_^)v</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 学委三件套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Json格式和Ajax的学习</title>
      <link href="2021/03/22/JsonAndAjax/"/>
      <url>2021/03/22/JsonAndAjax/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JSON格式</p></blockquote><p>基本语法：</p><ul><li><p>对象表示为键值对，数据用逗号分隔</p></li><li><p>花括号保存数组对象</p></li><li><p>方括号保存数组</p><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><pre><code class="line-numbers language-json">{"name": "QinJiang"}{"age": "3"}{"sex": "男"}</code></pre></li></ul><p><strong>JSON与JavaScript的关系：</strong></p><p>   JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><p><strong>JSON 和 JavaScript 对象互转</strong></p><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><pre><code>var obj = JSON.parse('{"a": "Hello", "b": "World"}');//结果是 {a: 'Hello', b: 'World'}</code></pre><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><pre><code>var json = JSON.stringify({a: 'Hello', b: 'World'});//结果是 '{"a": "Hello", "b": "World"}'</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Json </tag>
            
            <tag> Ajax </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于IAR&amp;STM32调试过程问题记录</title>
      <link href="2021/03/19/IAR/"/>
      <url>2021/03/19/IAR/</url>
      
        <content type="html"><![CDATA[<h2 id="IAR烧录时提示没有设备连接"><a href="#IAR烧录时提示没有设备连接" class="headerlink" title="IAR烧录时提示没有设备连接"></a>IAR烧录时提示没有设备连接</h2><p>当连接好电脑鼠并且检查线路没有问题并且驱动程序正常运行时，点击调试，出现“STM32 no emulator connected via USB…..”提示。</p><p>在网上查找了很多资料基本上4个问题：</p><pre><code class="line-numbers language-供电">1、板子一定要供电！2、ST-LINK是否接触不良确保ST-LINK跟板子连接完好3、按住reset点击download硬件和接线都没问题情况下，这时候可能是SWD的引脚被占用了，或者被禁用了。这时候ST-LINK自然无法通过SWD跟板子通信，所以才会提示No Target connected。所以，这时候按住reset，再点击download，再松开reset。原理就是在程序运行到SWD引脚占用之前，把新的程序烧录进去，抢个时间差。但是这招不是每次都管用，有概率性失败。但是不要紧，我们还有第四招4、boot0 接高电平download正常程序后，再接回低电平，即可烧录————————————————版权声明：本文为CSDN博主「小康师兄」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/kangweijian/article/details/107564868```</code></pre><p>但是这4个方法我都试过一遍<strong>还是没有解决。</strong></p><p>最后看到一篇文章受到启发：<a href="https://blog.csdn.net/c1063891514/article/details/81545601">https://blog.csdn.net/c1063891514/article/details/81545601</a></p><p>解决方法与链接文章没太大关系</p><p>是这篇文章最后两张图引起了我的注意，便想是不是连接设备接口没设置对，设置好接口果然设备连接成功了！！！具体步骤如下：</p><p>1、右键点击demo-Debug，选择Opotions</p><p><img src="/2021/03/19/IAR/1.jpg" alt="1"></p><p>2、选择Debugger设置Driver为图示<img src="/2021/03/19/IAR/2.jpg" alt="2"></p><p>3、点击Download设置，将图示√上即可<img src="/2021/03/19/IAR/3.jpg" alt="image-3"></p><p>点击OK后IAR即可正常识别设备，记得<em><strong>编译</strong></em>后，再烧录！！</p><p>电脑鼠连接不上电脑这个问题真的困扰了我们队伍好久！找老师又找学长又找老师又找学长,头发都快给我薅没了！体会还蛮深刻的，网络真的是个好东西，不懂的多问问别人，虽然别人不一定能帮你解决问题，但是会给你启发！<br><br>最后发个喜报！我买的域名终于过审了！！！！普天同庆！！！<br></p><p>之前因为重重问题来来回回和腾讯打了5、6个电话，修改又驳回4次信息，最后腾讯还是冒着风险帮我把备案提交给管局的，真的差点我都不想要这个域名了，心底一块石头终于落地了。<br><br></p><p>如果你觉得这篇文章解决了你的问题或者说对你还有用的话，欢迎打赏博主一块小饼干⸜₍๑•⌔•๑ ₎⸝。</p><p>如果有什么问题可以在评论区底下留言哦，欢迎交流<em>⸜( •ᴗ• )⸝</em><br><br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IAR </tag>
            
            <tag> STM32 </tag>
            
            <tag> 电脑鼠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown&amp;hexo&amp;Git常用操作</title>
      <link href="2021/03/05/GitAndHexo/"/>
      <url>2021/03/05/GitAndHexo/</url>
      
        <content type="html"><![CDATA[<h1 id="常用Hexo-amp-Git操作"><a href="#常用Hexo-amp-Git操作" class="headerlink" title="常用Hexo &amp; Git操作"></a>常用Hexo &amp; Git操作</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="使用hexo新建文章"><a href="#使用hexo新建文章" class="headerlink" title="使用hexo新建文章"></a>使用hexo新建文章</h3><br><ul><li>新建文章命令 ：<code>$ hexo new &lt;title&gt;</code></li></ul><p>输入上行命令之后在post文件夹出现两个文件，title文件夹用于存放图片资源；md文件则用于书写文章。</p><ul><li>在md文件头部信息补充分类信息：<code>categories:</code>(注意空格)</li></ul><p><strong>md常用语法：</strong></p><ol><li><p>标题：<code>#H1    一级标签...</code></p></li><li><p>无序列表：<code>+ 123  /- 123  /* 123</code></p></li><li><p>有序列表：<code>1. ABC  /2. ABC  /3.ABC</code></p></li><li><p>引用说明区块：<code>&gt; 引用内容</code></p></li><li><p>代码块：<code>1.少量代码，单行使用，直接用`包起来   2.大量代码需要多行使用，用三个`包裹起来</code></p></li><li><p>在文章中插入图片：<code>![1](./title/1.jpg)</code></p></li><li><p>链接：<code>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来:[简书](https://www.jianshu.com "创作你的创作")</code></p></li><li><p>分割线：</p><pre><code class="line-numbers language-markdown">---- - -------**** * *******____ _ _______</code></pre></li><li><p>首行缩进</p><pre><code class="line-numbers language-markdown">&amp;emsp; or &amp;#8195;  表示一个全角的空格&amp;emsp;&amp;emsp; 两个全角的空格（用的比较多）</code></pre></li></ol><br><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><p><code> $ hexo clean</code> </p><p>清除缓存和已生成静态文件<br></p><br><p><code>$ hexo g</code></p><p>生成静态文件<br></p><br><p><code> $ hexo s</code></p><p>启动服务器<br></p><br><p><code>$ hexo d</code></p><p>部署网站<br></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="使用git管理代码版本"><a href="#使用git管理代码版本" class="headerlink" title="使用git管理代码版本"></a>使用git管理代码版本</h3><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p><code>$ git init</code></p><p>在当前目录新建一个git代码库</p><br><p><code>$ git status</code></p><p>查看跟踪状态</p><br><p><code>$ git add flies（.）</code></p><p>把本地文件添加到暂存区（.  添加当前目录所有文件到暂存区）</p><br><p><code>$ git commit </code></p><p>添加到本地仓库</p><br><p><code>$ git push</code></p><p>添加到远程仓库</p><br><p><code>$ git pull</code></p><p>从远程拉到本地仓库</p><br><p><code>$ git branch</code></p><p>查看分支</p><br><p><code>$ git branch name</code></p><p>新建name分支</p><br><p><code>$ git checkout -b [branch name]</code></p><p>新建一个分支，并切换到该分支</p><br><p><code> $git checkout -d [branch name]</code> </p><p>删除分支</p><br>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git&amp;hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进来随便聊聊叭</title>
      <link href="2021/03/05/MyFristBlog/"/>
      <url>2021/03/05/MyFristBlog/</url>
      
        <content type="html"><![CDATA[<p>非常欢迎你来到我的博客，这是我的第一篇文章，我也不懂要写什么，就随便唠一下吧。</p><h4 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h4><p>​        我先介绍一下我自己吧，00后的大表哥，游手好闲无业网民，最喜欢吃大柳州的螺蛳粉，长板板混（蹲个大佬一起磕招），喜欢摄影，代码小菜鸡，秃头预备选手，只喜欢写一些实用代码（有好的点子一起交流）。</p><h4 id="建站故事"><a href="#建站故事" class="headerlink" title="建站故事"></a>建站故事</h4><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本来说20年的寒假要搭建这个个人博客的，当时非常幸运地在南京参与电影《非常替身》制作，担任实习剪辑助理一职，由于工作太“闲”了，我就开始对未来思考，于是乎就有了搭建这个博客的想法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始我是想搭一个我们学校滑板论坛的，但是考虑到实用性和推广难度就放弃了。然后在寒假断断续续的看了一点vue，学了几天myslq，flag就开始立起来了，说是这个寒假完成，然后回到家就开始玩了。。。剩最后10天开学了，我才抓紧起来，建站过程挺曲折的，一个方面是因为我的拖延，另一个方面源自于自我的不肯定，东一下学js，西一下学vue，学了一下mysql，又想下学期就有数据库的课，现在会不会太着急了，想学Spring又怕跳的太快，只知道wordpress又懒得学php……就这样一直和自己的想法对抗中，好像我就是纠结体本身，终于最后被逼到什么都来不及学，直接建站！事实证明在建站过程中学习，比先学再做来得更高效直接，回顾以前自学python、html、css的时候也是等不及慢慢啃知识点，直接实战了。本在在Gitpage上面部署过一次博客（已经能用的那种），后来又想买个服务器和域名玩一下，就又重新整了一套。</p><p>就好像在博客首页的“送你一颗子弹”一样</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后选择了hexo这个框架也是蛮幸运的，他刚好是基于前端三剑客的框架，不用再学php了（投降）。但是它的缺点是没有直接管理网站文章的后台，随便吧。</p><blockquote><p>就这样这个博客就稀里糊涂的建了起来。</p></blockquote><h4 id="立一些flag"><a href="#立一些flag" class="headerlink" title="立一些flag"></a>立一些flag</h4><blockquote><p>虽然说这个博客是搬别人的框架，但是二次开发我也费了蛮多心血的，改动还是蛮多的，修饰博客的界面就像装潢自己小窝一样。</p></blockquote><p>Flag1：以后在这个博客上面主要发一些学习笔记吧，也会发一些书摘，随笔，可能会上线说说板块</p><p>Flag2：等我学会调用API了会上线识别qq账号留言评论功能，大家就能有头像啦！</p><p>Flag3：“什么时候心血来潮”上线滑板、相册、vlog板块</p><p>Flag4：每周更新两篇文章（！！！一定要做到！！！）</p><p>Flag5：给自己的网站设计一个logo并且用PS或者AI做出来（应该不难）</p><p>Flag6：把写过的代码都上传到github上</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这么辛苦码字就是为了见你一面，留下你的脚印吧我的朋友,非常欢迎评论区或者留言互动！期待你的留言！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flag </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
